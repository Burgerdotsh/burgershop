#!/usr/bin/env bash

##########################################################################
# Burger-local - build docker images from json                           #
#                                                                        #
# @author: adrian7 <adrian@burger.sh>                                    #
# @version: 0.1                                                          #
##########################################################################

# Set include path
INCLUDEPATH="$(dirname "$0")"

# Add bin folder to PATH
PATH="$PATH:$INCLUDEPATH/bin";

# Set cache folder
CACHE_DIR="${INCLUDEPATH}/.cache";

# Include functions
source "$INCLUDEPATH/fn/usage.sh";
source "$INCLUDEPATH/fn/util.sh";
source "$INCLUDEPATH/fn/build.sh";

# Define name and version
SCRIPTNAME="$(basename $0)"
VERSION="0.4"

# Defaults
DEFAULT_BUILD_FILE="Burgerfile.json";
DEFAULT_BUILD_DIR=".burger";
DEFAULT_BUILD_TAG="latest";

BUILD_DIR='';
BUILD_FILE='';

BUILD_NAME='';
BUILD_TAG="latest";

# Build hash
BUILD_HASH='';

# Build temp dir.
BUILD_TMP_DIR='';

# Dockerfile optimization level
OPTIMIZE_LVL=0;

# Read input
BUILD_URN="${1}";
BUILD_REF="${2}";

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") 		set -- "$@" "-h" ;;
    "--test")  		set -- "$@" "-t" ;;
    "--upgrade")  	set -- "$@" "-u" ;;
    *)        		set -- "$@" "$arg"
  esac
done

shift

# Parse short options
while getopts "ut" o; do
    case "${o}" in
        u)
            u=1
            ;;
        t)
            t=1
			;;	
        *)
            usage
            ;;
    esac
done

shift $((OPTIND-1))

# Read options
DO_TEST=${t}
DO_UPGRADE=${u}

# Check env and dependencies
brgr-dependencies docker jq curl tr git cat openssl cut

if [ $? -eq 0 ]; then true; else
    # Dependency missing
    exit 1;
fi

# Init build
TIMSTAMP=$(date +%s);

INI_FILE=$(echo "${BUILD_URN}/${BUILD_REF}/${TIMSTAMP}" | openssl sha1);
INI_FILE="${CACHE_DIR}/${INI_FILE}.ini";

# Order
brgr-initbuild "${BUILD_URN}" "${BUILD_REF}" "${INI_FILE}";

if [ $? -eq 0 ]; then true; else
    #Could not init build
    error "Could not initialize build for ${BUILD_URN}.";
    exit 1;
fi

if [ -f "${INI_FILE}" ]; then true; else
    #Could not init build
    error "Failed to generate build ini file ${INI_FILE}.";
    exit 1;

fi

# Prepare Layerfiles
brgr-prepare "${INI_FILE}";

# Include ini
source "${INI_FILE}";

if [ -d "${BUILD_TMP_DIR}" ]; then true; else
    #Could not init build
    error "Failed to initialize build ${BUILD_HASH}.";
    exit 1;

fi

# Generate and optimize docker file
brgr-optimize "${BUILD_TMP_DIR}" ${OPTIMIZE_LVL};

#Restore path to original
PATH=${BKTH};

exit 1; #TODO








#TODO...
#Start build
info "Building image ${BUILDNAME} ... 
 - using ${CONFIG_DIR} configuration 
 - with php version ${CONFIG_VER}"
  
# Docker build
docker build -t $BUILDNAME \
	--build-arg BUILD_CONFIG="${CONFIG_DIR}" \
    --build-arg BUILD_BASE="${CONFIG_VER}" \
	.

# Build custom images based on the previously built image
if [ -z "$CUSTOMIZE" ]; then 
	info "No folder selected for customization. Bye Bye!"
	exit 0
fi

if [ ! -z "$CUSTOMIZE" ] && [ ! -d "$PWD/custom/$CUSTOMIZE" ]; then 
	warning "Folder ${CUSTOMIZE} can't be built. Folder missing!"
	exit 1
fi	

if [ -d "$PWD/custom" ]; then
	
	BUILD_DIR=$PWD/custom
	
	cd "$BUILD_DIR"
	
	for i in * ; do
		
		if [ ! -z "$CUSTOMIZE" ] && [ "$i" != "$CUSTOMIZE" ]; then
			continue
		fi
		
		if [ -d "$i" ] && [ -f "${BUILD_DIR}/${i}/Dockerfile" ]; then  
			
			DOCKERFILE_PATH="${BUILD_DIR}/${i}/Dockerfile"
	    	info "Building custom image $i:latest ..."
			
			docker build -t $i \
				-f "${DOCKERFILE_PATH}" \
				--build-arg BUILD_FROM="${BUILDNAME}" \
				--no-cache \
				"$BUILD_DIR/$i"
			
		else 
			warning "Folder ${i} can't be built. Dockerfile missing!"
		fi	
		
	done
	
fi